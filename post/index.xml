<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on tm&#39;s Blog</title>
    <link>https://y-tomimoto.github.io/post/</link>
    <description>Recent content in Posts on tm&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    
	<atom:link href="https://y-tomimoto.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://y-tomimoto.github.io/post/clean-architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://y-tomimoto.github.io/post/clean-architecture/</guid>
      <description> #　書評 序盤の煽り方は国民性が現れている気がする。彼らに煽られると赤信号も平気で渡ってしまいそうなくらい。
- 概要 -  第1部 イントロダクション
 第1章 : 設計とアーキテクチャ  ソフトウェアアーキテクチャの目的は、求められるシステムをを構築・保守するために必要な人材を最小限に抑えることである。金言。リリースごとに労力が増えるには、その設計がイケてないとあった。機能を増やすリリースにおいても同じなのだろうか&amp;hellip;   第2部 構成要素から始めよ : プログラミングパラダイム
 第3章 : パラダイムのパラダイムの概要
 初めてgoto文という言葉を聞いた。構造化プログラミングによって左記は解消されたらしい。調べてみると、確かに悪質なgoto文。ありがとう Edsger Wybe Dijlstra。
 プログラミングが始まって、3つの大きなパラダイムが起きたとある。このパラダイムは、何をすべきでないかを捉え、それをさせないように起きている。パラダイムごとに細かく詳細が記されていたんだけど、確かにこのパラダイムのおかげでめんどくさいことは書かなくても良くなっている気がする。
 ここでポリモーフィズムが登場した。Javaを知らないとわからないと思うので、ここでポリモーフィズムについて軽く説明があっても良かったとおもう。
     </description>
    </item>
    
    <item>
      <title></title>
      <link>https://y-tomimoto.github.io/post/flutter-learning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://y-tomimoto.github.io/post/flutter-learning/</guid>
      <description> flutterでわからないこと。 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://y-tomimoto.github.io/post/service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://y-tomimoto.github.io/post/service/</guid>
      <description>何を作成するか github
twitterのいいねを草化してgithubの草を作成する。 余裕があれば、これも作成する。 &amp;gt; https://twitter.com/1000ch/status/628417071525658624
twitter contributionを作成する際にapiについて &amp;gt; https://syncer.jp/Web/API/Twitter/REST_API/Object/　
このサイトで日々のトレンドが理解できているっていうことは、多分毎日できる気がする、、、
 一旦APIを叩いてみる。   https://qiita.com/kzthrk/items/84acb969dc0b23aeae58
  てかそもそもだけど、このAPIへリクエストを投げる際に、毎回登録をしないといけないんじゃないか？？ 他の人の認証情報を取得できるんだろうか、他のアナリティクスをどうやって表現するのだろうか？？  &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD
3. 多分行けそうな気がする。 The use of the Twitter API with this account is as follows:
 In my service, we will present a twitter contribution data view like github contribution(https://help.github.com/en/articles/viewing-contributions-on-your-profile). It is a service that allows you to check your contribution in twitter app looks like github contribution looks and enjoy how much you can contribute in twitter app.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://y-tomimoto.github.io/post/twitter-contribution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://y-tomimoto.github.io/post/twitter-contribution/</guid>
      <description> twitter api を取得するまで twitter api を取得したあと。 技術として何を採用するか 全体フロー
 clientからアカウント名を取得する(form等で入力させる。もしくはtwitterでメンションを飛ばしたら、それを画像として返すとか、なにをクライアントとするかは自動でおｋ)  あれが参考になりそう、大喜利bot クライアントが何になるかが結構大事。サービス名 ツイ廃ステータス  その値を用いてtwitter api にアクセスする  まずは叩いてみるか、どうせならNode.jsで構築したほうがおもろいよな。 どの技術を採用するか、どういう使われ方をしたいか→ツイ廃チェッカー（twitter contribution） https://da-14.com/blog/nodejs-vs-java-backend-language-large-software-development/ せっかくだしGoを触ってみるか。 バックエンドとして何を採用するのか。 シンプルにNode.jsでいいか、業務で触っているし。 では一旦Node.jsで作成するという前提で進めるか。 Goでも作ってみたい。 https://qiita.com/shti_f/items/b4b5d830672d908eff4e　一旦これを作成してみる。  必要なcontributionを取得する 日別に換算する json形式でclientにレスポンスを返す(かなり時間がかかりそう) jsで加工してpng形式で表示する(できればURLを開放してアクセスできるのがベストだが、、、)  </description>
    </item>
    
  </channel>
</rss>